version: '3.8'

# Define all secrets at the top level
secrets:
  database_url:
    file: ./secrets/database_url.txt
  redis_url:
    file: ./secrets/redis_url.txt
  secret_key:
    file: ./secrets/secret_key.txt
  llm_api_url:
    file: ./secrets/llm_api_url.txt
  google_maps_api_key:
    file: ./secrets/google_maps_api_key.txt
  mail_username:
    file: ./secrets/mail_username.txt
  mail_password:
    file: ./secrets/mail_password.txt

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: grocery-postgres
    environment:
      POSTGRES_DB: grocery_planner
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d grocery_planner"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for job queuing and caching
  redis:
    image: redis:7-alpine
    container_name: grocery-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Main application
  grocery-api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: grocery-api
    ports:
      - "8000:8000"
      - "8001:8001"  # Prometheus metrics
    secrets:
      - database_url
      - redis_url
      - secret_key
      - llm_api_url
      - google_maps_api_key
      - mail_username
      - mail_password
    environment:
      # Non-sensitive configuration only
      HOST: 0.0.0.0
      PORT: 8000
      LOG_LEVEL: INFO
      DEBUG: true
      
      # LLM
      DEFAULT_MODEL: qwen2.5-coder:14b
      
      # Telemetry
      TELEMETRY_ENABLED: true
      TELEMETRY_METRICS_PORT: 8001
      TELEMETRY_CONSOLE_EXPORT: true
      
      # Email (non-sensitive)
      MAIL_FROM: noreply@grocery-ai.local
      MAIL_PORT: 587
      MAIL_SERVER: smtp.gmail.com
      MAIL_STARTTLS: true
      MAIL_SSL_TLS: false
      
      # Scraping
      MAX_SCRAPE_WORKERS: 3
      SCRAPE_DELAY_MIN: 1
      SCRAPE_DELAY_MAX: 3
      USER_AGENT: GroceryAI-Bot/1.0
      FLIPP_RATE_LIMIT_DELAY: 0.5
      SCRAPING_TIMEOUT: 30
      SELENIUM_HEADLESS: true
      MAX_SCRAPING_RETRIES: 3
      ENABLE_FLIPP_API: true
      ENABLE_SELENIUM_FALLBACK: true
      ENABLE_PDF_FALLBACK: false
      ENABLE_VISION_FALLBACK: false
      
      # Jobs
      CELERY_RESULT_EXPIRES: 3600
      MAX_RETRIES: 3
      
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery Worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: grocery-celery-worker
    command: celery -A worker worker --loglevel=info
    secrets:
      - database_url
      - redis_url
      - llm_api_url
      - google_maps_api_key
      - mail_username
      - mail_password
    environment:
      # Non-sensitive configuration only
      DEFAULT_MODEL: qwen2.5-coder:14b
      MAIL_FROM: noreply@grocery-ai.local
      MAIL_PORT: 587
      MAIL_SERVER: smtp.gmail.com
      MAIL_STARTTLS: true
      MAIL_SSL_TLS: false
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: grocery-celery-beat
    command: celery -A worker beat --loglevel=info
    secrets:
      - database_url
      - redis_url
    environment:
      # Minimal environment for beat scheduler
      DEFAULT_MODEL: qwen2.5-coder:14b
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: grocery-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    depends_on:
      - grocery-api

  # Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grocery-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Usage:
# 1. Setup secrets: ./scripts/setup-secrets.sh
# 2. Start services: docker-compose up -d
# 3. Check logs: docker-compose logs -f grocery-api